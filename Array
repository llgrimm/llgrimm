#pragma once

#include <array>
#include <stdexcept>

template <typename T, size_t N>
class StackVector {
public:
    explicit StackVector(size_t a_size = 0)
        : data_{N}, N_(N) {
            
        if (a_size > N) {
            throw std::invalid_argument("invalid_argument");
        }
            size_ = a_size;
    }

    T& operator[](size_t index) {
        return data_.at(index);
    }
    
    const T& operator[](size_t index) const {
        
        return data_.at(index);
    }

    auto begin() {
        return data_.begin();
    }
    auto end() {
        return data_.begin() + size_;
    }
    auto begin() const {
        return data_.begin();
    }
    auto end() const {
        return data_.begin() + size_;
    }
    
    size_t Size() const {
        return size_;
    }
    
    size_t Capacity() const {
        return N_;
    }

    void PushBack(const T& value) {
        if (size_ == N_) {
            throw std::overflow_error("overflow_error");
        }
        ++size_;
        *(data_.begin() + size_) = value;  
    }
    
    T PopBack() {
        if (size_ == 0) {
            throw std::underflow_error("underflow_error");
        }
        auto result = *(data_.begin() + size_);
        --size_;
        return result;
    }
    
private:
    std::array<T, N> data_;
    size_t N_;
    size_t size_ = 0;
};
