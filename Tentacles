#pragma once

// Тут можно подключить scopedptr.h и ptrvector.h, 
// если они вам понадобятся.
#include "ptrvector.h"
#include "scopedptr.h"

#include <new> // Для исключения bad_alloc
#include <vector>
#include <string>
#include <iostream>

// Щупальце
class Tentacle {
public:
    explicit Tentacle(int id) noexcept
        : id_(id) {
    }

    int GetId() const noexcept {
        return id_;
    }

    Tentacle* GetLinkedTentacle() const noexcept {
        return linked_tentacle_;
    }
    void LinkTo(Tentacle& tentacle) noexcept {
        linked_tentacle_ = &tentacle;
    }
    void Unlink() noexcept {
        linked_tentacle_ = nullptr;
    }

private:
    int id_ = 0;
    Tentacle* linked_tentacle_ = nullptr;
};

// Осьминог
class Octopus {
public:
    Octopus()
        : Octopus(8) {
    }

    explicit Octopus(int num_tentacles) {
        PtrVector<Tentacle> ptr_vec;
        for (int i = 0; i < num_tentacles; ++i) {
            
            //int id = GetTentacleCount() + 1;
            ScopedPtr<Tentacle> ptr(new Tentacle(GetTentacleCount() + 1));
            ptr_vec.GetItems().push_back(ptr.GetRawPtr());
            tentacles_.push_back(ptr_vec.GetItems()[ptr_vec.GetItems().size() - 1]);
            //std::cout << GetTentacleCount() << std::endl;
            //std::cout << GetTentacle(i).GetId() << std::endl;
            ptr.Release();
            //std::cout << GetTentacle(i).GetId() << std::endl;
        }
    }

    /*~Octopus() {
        // Осьминог владеет объектами в динамической памяти (щупальца),
        // которые должны быть удалены при его разрушении.
        // Деструктор - лучшее место, чтобы прибраться за собой.
        Cleanup();
    }*/

    // Добавляет новое щупальце с идентификатором,
    // равным (количество_щупалец + 1):
    // 1, 2, 3, ...
    // Возвращает ссылку на добавленное щупальце
    Tentacle& AddTentacle() {
    //     Реализуйте добавление щупальца самостоятельно
        PtrVector<Tentacle> ptr_vec;
        //int id = GetTentacleCount() + 1;
        ScopedPtr<Tentacle> ptr(new Tentacle(GetTentacleCount() + 1));
        ptr_vec.GetItems().push_back(ptr.GetRawPtr());
        tentacles_.push_back(ptr_vec.GetItems()[ptr_vec.GetItems().size() - 1]);
        ptr.Release();
        return *tentacles_.at(tentacles_.size() - 1);
    }

    int GetTentacleCount() const noexcept {
        return static_cast<int>(tentacles_.size());
    }

    const Tentacle& GetTentacle(size_t index) const {
        return *tentacles_.at(index);
    }
    Tentacle& GetTentacle(size_t index) {
        return *tentacles_.at(index);
    }

private:
    void Cleanup() {
        // Удаляем щупальца осьминога из динамической памяти
        for (Tentacle* t : tentacles_) {
            delete t;
        }
        // Очищаем массив указателей на щупальца
        tentacles_.clear();
    }

    // Вектор хранит указатели на щупальца. Сами объекты щупалец находятся в куче
    std::vector<Tentacle*> tentacles_;
};
